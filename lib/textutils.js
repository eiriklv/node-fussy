// Generated by CoffeeScript 1.6.3
(function() {
  var NUMERIC_KEYPOINTS, NUMERIC_KEYPOINTS_REVERSE, _ngramize;

  exports.replaceAll = function(find, replace, str) {
    return str.replace(new RegExp(find, 'g'), replace);
  };

  _ngramize = function(words, n) {
    var gram, grams, i, k, subgrams, v, w, _i, _j, _len, _ref;
    if (!Array.isArray(words)) {
      words = (function() {
        var _i, _len, _ref, _results;
        _ref = words.split(' ');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          w = _ref[_i];
          if (w.length < 3) {
            continue;
          }
          _results.push(w);
        }
        return _results;
      })();
    }
    grams = {};
    if (n < 2) {
      for (_i = 0, _len = words.length; _i < _len; _i++) {
        w = words[_i];
        grams["" + w] = Array.isArray(w) ? w : [w];
      }
      return grams;
    }
    for (i = _j = 0, _ref = words.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
      gram = words.slice(i, i + n);
      subgrams = _ngramize(gram, n - 1);
      for (k in subgrams) {
        v = subgrams[k];
        grams[k] = v;
      }
      if (i > words.length - n) {
        break;
      }
      grams["" + gram] = gram;
    }
    return grams;
  };

  exports.ngramize = function(words, n) {
    var ngram, ngrams, splitted, _i, _len, _ref;
    ngrams = {};
    _ref = Object.keys(_ngramize(words, n));
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ngram = _ref[_i];
      splitted = ngram.split(",");
      ngrams[splitted.join(" ").toString()] = 1;
    }
    return ngrams;
  };

  NUMERIC_KEYPOINTS = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000];

  NUMERIC_KEYPOINTS_REVERSE = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000].reverse();

  exports.numerize = function(sentence) {
    var category, numeric, test, word, _i, _j, _k, _len, _len1, _len2, _ref;
    numeric = {};
    _ref = sentence.split(" ");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      word = _ref[_i];
      test = Number(word);
      if (!(!isNaN(test) && isFinite(test))) {
        continue;
      }
      for (_j = 0, _len1 = NUMERIC_KEYPOINTS.length; _j < _len1; _j++) {
        category = NUMERIC_KEYPOINTS[_j];
        if (test < category) {
          numeric["less_than_" + category] = 1;
          break;
        }
      }
      for (_k = 0, _len2 = NUMERIC_KEYPOINTS_REVERSE.length; _k < _len2; _k++) {
        category = NUMERIC_KEYPOINTS_REVERSE[_k];
        if (test > category) {
          numeric["more_than_" + category] = 1;
          break;
        }
      }
    }
    return numeric;
  };

  exports.cleanContent = function(content) {
    content = content.replace(/(&[a-zA-Z]+;|\\t)/g, ' ');
    content = content.replace(/(?:\.|\?|!|\:|;|,)+/g, '.');
    content = content.replace(/\s+/g, ' ');
    content = content.replace(/(?:\\n)+/g, '');
    content = content.replace(/\n+/g, '');
    return content;
  };

  exports.contentToSentences = function(content) {
    var sent, sentences, _i, _len, _ref;
    sentences = [];
    _ref = content.split(".");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      sent = _ref[_i];
      sent = sent.trim();
      if (sent.length > 2) {
        sentences.push(sent);
      }
    }
    return sentences;
  };

}).call(this);
