// Generated by CoffeeScript 1.6.3
(function() {
  var Facets, NEGATIVE, NEUTRAL, P, POSITIVE, cleanContent, contentToSentences, debug, emptyThesaurus, fs, isString, ngramize, numerize, pick, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  pick = require('deck').pick;

  _ref = require('./textutils'), ngramize = _ref.ngramize, numerize = _ref.numerize, cleanContent = _ref.cleanContent, contentToSentences = _ref.contentToSentences;

  debug = function() {};

  isString = function(obj) {
    return !!(obj === '' || (obj && obj.charCodeAt && obj.substr));
  };

  P = function(p) {
    if (p == null) {
      p = 0.5;
    }
    return +(Math.random() < p);
  };

  POSITIVE = exports.POSITIVE = +1;

  NEGATIVE = exports.NEGATIVE = -1;

  NEUTRAL = exports.NEUTRAL = 0;

  emptyThesaurus = {
    find: function() {
      return [];
    }
  };

  Facets = (function() {
    function Facets(opts) {
      var _ref1, _ref2, _ref3;
      if (opts == null) {
        opts = {};
      }
      this.facets = (_ref1 = opts.facets) != null ? _ref1 : {};
      this.stringSize = (_ref2 = opts.stringSize) != null ? _ref2 : [0, 30];
      this.network = (_ref3 = opts.network) != null ? _ref3 : {};
    }

    Facets.prototype.put = function(facet, weight) {
      var _ref1;
      if (weight == null) {
        weight = 1;
      }
      if ((this.stringSize[0] < (_ref1 = facet.length) && _ref1 < this.stringSize[1])) {
        this.facets[facet] = 1;
      }
      return this;
    };

    Facets.prototype.resonate = function(times) {
      var facet_a, facet_b, i, weight_a, weight_b, _i, _ref1, _ref2, _ref3, _ref4;
      if (times == null) {
        times = 5;
      }
      for (i = _i = 0; 0 <= times ? _i < times : _i > times; i = 0 <= times ? ++_i : --_i) {
        debug(" - resonate " + i);
        _ref1 = this.facets;
        for (facet_a in _ref1) {
          weight_a = _ref1[facet_a];
          facet_a = facet_a.toLowerCase();
          _ref3 = (_ref2 = this.network[facet_a]) != null ? _ref2 : {};
          for (facet_b in _ref3) {
            weight_b = _ref3[facet_b];
            this.facets[facet_b] = weight_a * weight_b + ((_ref4 = this.facets[facet_b]) != null ? _ref4 : 0);
          }
        }
      }
      return this;
    };

    Facets.prototype.explore = function(times) {
      var facet_a, facet_b, i, weight_a, weight_b, _i, _ref1, _ref2, _ref3;
      if (times == null) {
        times = 5;
      }
      for (i = _i = 0; 0 <= times ? _i < times : _i > times; i = 0 <= times ? ++_i : --_i) {
        _ref1 = this.facets;
        for (facet_a in _ref1) {
          weight_a = _ref1[facet_a];
          facet_a = facet_a.toLowerCase();
          _ref3 = (_ref2 = this.network[facet_a]) != null ? _ref2 : {};
          for (facet_b in _ref3) {
            weight_b = _ref3[facet_b];
            this.facets[facet_b] = 1;
          }
        }
      }
      return this;
    };

    Facets.prototype.dump = function() {
      return this.facets;
    };

    return Facets;

  })();

  exports.Engine = (function() {
    function Engine(opts) {
      var _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
      if (opts == null) {
        opts = {};
      }
      if (isString(opts)) {
        debug("loading '" + opts + "'..");
        opts = JSON.parse(fs.readFileSync(opts, 'utf8'));
      }
      this.stringSize = (_ref1 = opts.stringSize) != null ? _ref1 : [0, 30];
      this.ngramSize = (_ref2 = opts.ngramSize) != null ? _ref2 : 3;
      this.debug = (_ref3 = opts.debug) != null ? _ref3 : false;
      this.sampling = (_ref4 = opts.sampling) != null ? _ref4 : 0.3;
      debug = this.debug ? console.log : function() {};
      this.profiles = (_ref5 = opts.profiles) != null ? _ref5 : {};
      this.network = (_ref6 = opts.network) != null ? _ref6 : {};
      this.database = (function() {
        var backend, params, uri, _ref7, _ref8;
        uri = (_ref7 = opts.database) != null ? _ref7 : "://";
        _ref8 = uri.split("://"), backend = _ref8[0], params = _ref8[1];
        if (backend === 'redis') {
          return debug("redis not supported yet, but no big deal.");
        }
      })();
    }

    Engine.prototype.extractFacetsFromRawContent = function(raw) {
      var facet, facets, sentence, sentences, weight, _i, _len, _ref1, _ref2;
      sentences = contentToSentences(cleanContent(raw));
      facets = new Facets({
        stringSize: this.stringSize,
        network: this.network
      });
      for (_i = 0, _len = sentences.length; _i < _len; _i++) {
        sentence = sentences[_i];
        _ref1 = ngramize(sentence, this.ngramSize);
        for (facet in _ref1) {
          weight = _ref1[facet];
          facets.put(facet, weight);
        }
        _ref2 = numerize(sentence);
        for (facet in _ref2) {
          weight = _ref2[facet];
          facets.put(facet, weight);
        }
      }
      facets.explore(3);
      return facets.dump();
    };

    Engine.prototype.store = function(event) {
      var facet, profile, weight, _ref1, _ref2;
      if (event.signal === NEUTRAL) {
        debug("signal is neutral, ignoring");
        return;
      }
      if (this.profiles[event.profile] == null) {
        debug("creating profile for " + event.profile);
        this.profiles[event.profile] = {};
      }
      profile = this.profiles[event.profile];
      debug("updating profile " + event.profile + "..");
      _ref1 = this.extractFacetsFromRawContent(event.content);
      for (facet in _ref1) {
        weight = _ref1[facet];
        profile[facet] = event.signal * weight + ((_ref2 = profile[facet]) != null ? _ref2 : 0);
      }
      return this;
    };

    Engine.prototype.prune = function(min, max) {
      var facet, facets, profile, _, _ref1, _ref2;
      _ref1 = this.profiles;
      for (profile in _ref1) {
        facets = _ref1[profile];
        for (facet in facets) {
          _ = facets[facet];
          facets[facet] = facets[facet] - 1;
          if ((min < (_ref2 = facets[facet]) && _ref2 < max)) {
            delete facets[facet];
          }
        }
      }
      return this;
    };

    Engine.prototype.rateProfiles = function(content, opts) {
      var facet, facets, filter, id, limit, profile, results, score, weight, _ref1, _ref2, _ref3;
      if (opts == null) {
        opts = {};
      }
      filter = (_ref1 = opts.profiles) != null ? _ref1 : [];
      limit = opts.limit;
      results = [];
      facets = this.extractFacetsFromRawContent(content);
      _ref2 = this.profiles;
      for (id in _ref2) {
        profile = _ref2[id];
        if (filter.length && __indexOf.call(filter, id) < 0) {
          continue;
        }
        score = 0;
        for (facet in facets) {
          weight = facets[facet];
          score += weight * ((_ref3 = profile[facet]) != null ? _ref3 : 0);
        }
        results.push([id, score]);
        if (limit == null) {
          continue;
        }
        if (--limit <= 0) {
          break;
        }
      }
      results.sort(function(a, b) {
        return b[1] - a[1];
      });
      return results;
    };

    Engine.prototype.rateContents = function(id, contents) {
      var content, facet, profile, score, top, weight, _i, _len, _ref1, _ref2, _ref3;
      profile = (_ref1 = this.profiles[id]) != null ? _ref1 : {};
      top = [];
      id = 0;
      for (_i = 0, _len = contents.length; _i < _len; _i++) {
        content = contents[_i];
        score = 0;
        _ref2 = this.extractFacetsFromRawContent(content);
        for (facet in _ref2) {
          weight = _ref2[facet];
          score += weight * ((_ref3 = profile[facet]) != null ? _ref3 : 0);
        }
        top.push([content, score]);
      }
      top.sort(function(a, b) {
        return b[1] - a[1];
      });
      return top;
    };

    Engine.prototype.save = function(filePath) {
      var facet, facets, profile, remaining_facets, remaining_profiles, weight, write, _ref1;
      if (filePath == null) {
        throw "Error, no file path given";
      }
      write = function(x) {
        return fs.appendFileSync(filePath, x.toString() + '\n');
      };
      fs.writeFileSync(filePath, '{\n');
      write("  \"stringSize\": [" + this.stringSize + "],");
      write("  \"ngramSize\": " + this.ngramSize + ",");
      write("  \"profiles\": {");
      remaining_profiles = Object.keys(this.profiles).length;
      _ref1 = this.profiles;
      for (profile in _ref1) {
        facets = _ref1[profile];
        write("    \"" + profile + "\": {");
        remaining_facets = Object.keys(facets).length;
        for (facet in facets) {
          weight = facets[facet];
          write("      \"" + facet + "\": " + weight + (--remaining_facets > 0 ? ',' : ''));
        }
        write("    }" + (--remaining_profiles > 0 ? ',' : ''));
      }
      return write("  }\n}");
    };

    return Engine;

  })();

}).call(this);
