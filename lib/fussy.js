// Generated by CoffeeScript 1.4.0
(function() {
  var NEGATIVE, NEUTRAL, POSITIVE, cleanContent, debug, enrich, fs, isString, ngramize, replaceAll, thesaurus,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  thesaurus = require('thesaurus');

  debug = function() {};

  isString = function(obj) {
    return !!(obj === '' || (obj && obj.charCodeAt && obj.substr));
  };

  replaceAll = function(find, replace, str) {
    return str.replace(new RegExp(find, 'g'), replace);
  };

  exports.cleanContent = cleanContent = function(content) {
    return content.replace(/\s+/g, ' ').replace(/\n/g, '');
  };

  enrich = function(words) {
    var anotherWord, moreWords, word, _i, _j, _len, _len1, _ref;
    moreWords = [];
    for (_i = 0, _len = words.length; _i < _len; _i++) {
      word = words[_i];
      _ref = thesaurus.find(word);
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        anotherWord = _ref[_j];
        if (__indexOf.call(moreWords, anotherWord) < 0) {
          moreWords.push(anotherWord);
        }
      }
    }
    return moreWords;
  };

  POSITIVE = exports.POSITIVE = +1;

  NEGATIVE = exports.NEGATIVE = -1;

  NEUTRAL = exports.NEUTRAL = 0;

  ngramize = function(words, n) {
    var gram, grams, i, k, subgrams, v, w, _i, _j, _len, _ref;
    if (!Array.isArray(words)) {
      words = words.split(' ');
    }
    grams = {};
    if (n < 2) {
      for (_i = 0, _len = words.length; _i < _len; _i++) {
        w = words[_i];
        grams["" + w] = Array.isArray(w) ? w : [w];
      }
      return grams;
    }
    for (i = _j = 0, _ref = words.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
      gram = words.slice(i, i + n);
      subgrams = ngramize(gram, n - 1);
      for (k in subgrams) {
        v = subgrams[k];
        grams[k] = v;
      }
      if (i > words.length - n) {
        break;
      }
      grams["" + gram] = gram;
    }
    return grams;
  };

  exports.Engine = (function() {

    function Engine(opts) {
      var _ref, _ref1, _ref2, _ref3;
      if (opts == null) {
        opts = {};
      }
      if (isString(opts)) {
        debug("loading '" + opts + "'..");
        opts = JSON.parse(fs.readFileSync(opts, 'utf8'));
      }
      this.stringSize = (_ref = opts.stringSize) != null ? _ref : [0, 30];
      this.ngramSize = (_ref1 = opts.ngramSize) != null ? _ref1 : 2;
      this.debug = (_ref2 = opts.debug) != null ? _ref2 : false;
      debug = this.debug ? console.log : function() {};
      this.profiles = (_ref3 = opts.profiles) != null ? _ref3 : {};
    }

    Engine.prototype.pushEvent = function(event) {
      var changed, content, facet, profile, synonym, _, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
      if (event.signal === NEUTRAL) {
        debug("signal is neutral, ignoring");
        return;
      }
      if (!(this.profiles[event.profile] != null)) {
        debug("creating profile for " + event.profile);
        this.profiles[event.profile] = {};
      }
      profile = this.profiles[event.profile];
      debug("updating profile " + event.profile + "..");
      changed = {
        content: 0,
        synonyms: 0
      };
      content = cleanContent(event.content);
      _ref = ngramize(content, this.ngramSize);
      for (facet in _ref) {
        _ = _ref[facet];
        if (!((this.stringSize[0] < (_ref1 = facet.length) && _ref1 < this.stringSize[1]))) {
          continue;
        }
        profile[facet] = event.signal + ((_ref2 = profile[facet]) != null ? _ref2 : 0);
        changed.content++;
      }
      _ref3 = enrich(content.split(' '));
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        synonym = _ref3[_i];
        _ref4 = ngramize(synonym, this.ngramSize);
        for (facet in _ref4) {
          _ = _ref4[facet];
          if (!((this.stringSize[0] < (_ref5 = facet.length) && _ref5 < this.stringSize[1]))) {
            continue;
          }
          profile[facet] = event.signal + ((_ref6 = profile[facet]) != null ? _ref6 : 0);
          changed.synonyms++;
        }
      }
      return debug("" + (event.signal > 0 ? 'reinforced' : 'weakened') + " " + (JSON.stringify(changed)) + " facets");
    };

    Engine.prototype.prune = function(min, max) {
      var facet, facets, profile, _, _ref, _results;
      _ref = this.profiles;
      _results = [];
      for (profile in _ref) {
        facets = _ref[profile];
        _results.push((function() {
          var _ref1, _results1;
          _results1 = [];
          for (facet in facets) {
            _ = facets[facet];
            facets[facet] = facets[facet] - 1;
            if ((min < (_ref1 = facets[facet]) && _ref1 < max)) {
              _results1.push(delete facets[facet]);
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })());
      }
      return _results;
    };

    Engine.prototype.rateProfiles = function(content, opts) {
      var facet, facets, filter, id, limit, profile, results, score, synonym, _, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4;
      if (opts == null) {
        opts = {};
      }
      filter = (_ref = opts.profiles) != null ? _ref : [];
      limit = opts.limit;
      results = [];
      content = cleanContent(content);
      facets = (function() {
        var _ref1, _results;
        _ref1 = ngramize(content, this.ngramSize);
        _results = [];
        for (facet in _ref1) {
          _ = _ref1[facet];
          _results.push(facet);
        }
        return _results;
      }).call(this);
      _ref1 = enrich(content.split(' '));
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        synonym = _ref1[_i];
        _ref2 = ngramize(synonym, this.ngramSize);
        for (facet in _ref2) {
          _ = _ref2[facet];
          facets.push(facet);
        }
      }
      _ref3 = this.profiles;
      for (id in _ref3) {
        profile = _ref3[id];
        if (filter.length && __indexOf.call(filter, id) < 0) {
          continue;
        }
        score = 0;
        for (_j = 0, _len1 = facets.length; _j < _len1; _j++) {
          facet = facets[_j];
          score += (_ref4 = profile[facet]) != null ? _ref4 : 0;
        }
        results.push([id, score]);
        if (limit == null) {
          continue;
        }
        if (--limit <= 0) {
          break;
        }
      }
      results.sort(function(a, b) {
        return b[1] - a[1];
      });
      return results;
    };

    Engine.prototype.rateContents = function(id, contents) {
      var content, facet, profile, score, synonym, top, _, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      profile = (_ref = this.profiles[id]) != null ? _ref : {};
      top = [];
      id = 0;
      for (_i = 0, _len = contents.length; _i < _len; _i++) {
        content = contents[_i];
        score = 0;
        _ref1 = ngramize(content, this.ngramSize);
        for (facet in _ref1) {
          _ = _ref1[facet];
          score += (_ref2 = profile[facet]) != null ? _ref2 : 0;
        }
        _ref3 = enrich(content.split(' '));
        for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
          synonym = _ref3[_j];
          _ref4 = ngramize(synonym, this.ngramSize);
          for (facet in _ref4) {
            _ = _ref4[facet];
            score += (_ref5 = profile[facet]) != null ? _ref5 : 0;
          }
        }
        top.push([content, score]);
      }
      top.sort(function(a, b) {
        return b[1] - a[1];
      });
      return top;
    };

    Engine.prototype.save = function(filePath) {
      var facet, facets, profile, remaining_facets, remaining_profiles, weight, write, _ref;
      if (filePath == null) {
        throw "Error, no file path given";
      }
      write = function(x) {
        return fs.appendFileSync(filePath, x.toString() + '\n');
      };
      fs.writeFileSync(filePath, '{\n');
      write("  \"stringSize\": [" + this.stringSize + "],");
      write("  \"ngramSize\": " + this.ngramSize + ",");
      write("  \"profiles\": {");
      remaining_profiles = Object.keys(this.profiles).length;
      _ref = this.profiles;
      for (profile in _ref) {
        facets = _ref[profile];
        write("    \"" + profile + "\": {");
        remaining_facets = Object.keys(facets).length;
        for (facet in facets) {
          weight = facets[facet];
          write("      \"" + facet + "\": " + weight + (--remaining_facets > 0 ? ',' : ''));
        }
        write("    }" + (--remaining_profiles > 0 ? ',' : ''));
      }
      return write("  }\n}");
    };

    return Engine;

  })();

}).call(this);
