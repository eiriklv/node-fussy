// Generated by CoffeeScript 1.6.3
(function() {
  var NEGATIVE, NEUTRAL, POSITIVE, after, enrich, isNumber, isString, log, ngramize, pretty, thesaurus, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ref = require('petri').common, pretty = _ref.pretty, isString = _ref.isString, isNumber = _ref.isNumber, after = _ref.after;

  thesaurus = require('thesaurus');

  log = console.log;

  enrich = function(words) {
    var anotherWord, moreWords, word, _i, _j, _len, _len1, _ref1;
    moreWords = [];
    for (_i = 0, _len = words.length; _i < _len; _i++) {
      word = words[_i];
      _ref1 = thesaurus.find(word);
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        anotherWord = _ref1[_j];
        if (__indexOf.call(moreWords, anotherWord) < 0) {
          moreWords.push(anotherWord);
        }
      }
    }
    return moreWords;
  };

  POSITIVE = exports.POSITIVE = +1;

  NEGATIVE = exports.NEGATIVE = -1;

  NEUTRAL = exports.NEUTRAL = 0;

  ngramize = function(words, n) {
    var gram, grams, i, k, subgrams, v, w, _i, _j, _len, _ref1;
    if (!Array.isArray(words)) {
      words = words.split(' ');
    }
    grams = {};
    if (n < 2) {
      for (_i = 0, _len = words.length; _i < _len; _i++) {
        w = words[_i];
        grams["" + w] = Array.isArray(w) ? w : [w];
      }
      return grams;
    }
    for (i = _j = 0, _ref1 = words.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
      gram = words.slice(i, i + n);
      subgrams = ngramize(gram, n - 1);
      for (k in subgrams) {
        v = subgrams[k];
        grams[k] = v;
      }
      if (i > words.length - n) {
        break;
      }
      grams["" + gram] = gram;
    }
    return grams;
  };

  exports.Engine = (function() {
    function Engine(opts) {
      var _ref1, _ref2;
      if (opts == null) {
        opts = {};
      }
      this.stringSize = (_ref1 = opts.stringSize) != null ? _ref1 : [0, 30];
      this.ngramsSize = (_ref2 = opts.ngramsSize) != null ? _ref2 : 2;
      this.profiles = {};
    }

    Engine.prototype.pushEvent = function(event) {
      var changed, facet, profile, synonym, _, _i, _len, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
      if (event.signal === NEUTRAL) {
        log("signal is neutral, ignoring");
        return;
      }
      if (this.profiles[event.profile] == null) {
        log("creating profile for " + event.profile);
        this.profiles[event.profile] = {};
      }
      profile = this.profiles[event.profile];
      log("updating profile " + event.profile + "..");
      changed = {
        content: 0,
        synonyms: 0
      };
      _ref1 = ngramize(event.content, this.ngramsSize);
      for (facet in _ref1) {
        _ = _ref1[facet];
        if (!((this.stringSize[0] < (_ref2 = facet.length) && _ref2 < this.stringSize[1]))) {
          continue;
        }
        profile[facet] = event.signal + ((_ref3 = profile[facet]) != null ? _ref3 : 0);
        changed.content++;
      }
      _ref4 = enrich(event.content.split(' '));
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        synonym = _ref4[_i];
        _ref5 = ngramize(synonym, 3);
        for (facet in _ref5) {
          _ = _ref5[facet];
          if (!((this.stringSize[0] < (_ref6 = facet.length) && _ref6 < this.stringSize[1]))) {
            continue;
          }
          profile[facet] = event.signal + ((_ref7 = profile[facet]) != null ? _ref7 : 0);
          changed.synonyms++;
        }
      }
      return log("" + (event.signal > 0 ? 'reinforced' : 'weakened') + " " + (pretty(changed)) + " facets");
    };

    Engine.prototype.prune = function(min, max) {
      var facet, facets, profile, _, _ref1, _results;
      _ref1 = this.profiles;
      _results = [];
      for (profile in _ref1) {
        facets = _ref1[profile];
        _results.push((function() {
          var _ref2, _results1;
          _results1 = [];
          for (facet in facets) {
            _ = facets[facet];
            facets[facet] = facets[facet] - 1;
            if ((min < (_ref2 = facets[facet]) && _ref2 < max)) {
              _results1.push(delete facets[facet]);
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })());
      }
      return _results;
    };

    Engine.prototype.matchOne = function(id, content) {};

    Engine.prototype.matchAll = function(content, N) {};

    return Engine;

  })();

}).call(this);
